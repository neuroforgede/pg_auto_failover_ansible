---
- name: "initialize computed_postgresql_cluster_pg_hba_entries"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: []

# TODO: this might be suboptimal if run on a secondary. we have not run into any issues so far though.
- name: Ensure PostgreSQL pgautofailover_monitor user is present.
  retries: 5
  delay: 3
  community.postgresql.postgresql_user:
    name: "pgautofailover_monitor"
    login_host: "localhost"
    login_user: "{{ postgresql_cluster_user }}"
    login_unix_socket: "{{ postgresql_cluster_unix_socket_directories[0] }}"
    port: "{{ postgresql_cluster_port }}"
    state: "present"
  no_log: "{{ postgres_users_no_log }}"
  become: true
  register: pgautofailover_monitor_user_creation
  become_user: "{{ postgresql_cluster_user }}"
  when: not (postgresql_cluster_is_monitor | default('False') | bool)
  until: pgautofailover_monitor_user_creation is not failed
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true


- name: "add postgres user to pg_hba entries for each cluster member for postgres database"
  vars:
    new_entry:
      type: hostssl
      database: "postgres"
      address: "{{ hostvars[item]['host_ip'] | default(hostvars[item]['ansible_host']) }}/32"
      user: "postgres"
      auth_method: cert
      auth_options: "map=postgres_node_remote"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + [new_entry] }}"
  loop: "{{ groups['postgres_cluster'] | default([]) | flatten(levels=1) }}"

- name: "add postgres user to pg_hba entries for each cluster member for template1 database"
  vars:
    new_entry:
      type: hostssl
      database: "template1"
      address: "{{ hostvars[item]['host_ip'] | default(hostvars[item]['ansible_host']) }}/32"
      user: "postgres"
      auth_method: cert
      auth_options: "map=postgres_node_remote"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + [new_entry] }}"
  loop: "{{ groups['postgres_cluster'] | default([]) | flatten(levels=1) }}"

- name: "add autoctl_node user to pg_hba entries for each monitor node"
  vars:
    new_entry:
      type: local
      database: "template1"
      user: "autoctl_node"
      auth_method: peer
      auth_options: "map=autoctl_node_peer"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + [new_entry] }}"
  when: postgresql_cluster_is_monitor | default('False') | bool

- name: "add autoctl_node user to pg_hba entries for each monitor node"
  vars:
    new_entry:
      type: local
      database: "pg_auto_failover"
      user: "autoctl_node"
      auth_method: peer
      auth_options: "map=autoctl_node_peer"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + [new_entry] }}"
  when: postgresql_cluster_is_monitor | default('False') | bool

- name: "add autoctl_node user to pg_hba entries for each cluster member for autoctl_node database"
  vars:
    new_entry:
      type: hostssl
      database: "autoctl"
      address: "{{ hostvars[item]['host_ip'] | default(hostvars[item]['ansible_host']) }}/32"
      user: "autoctl_node"
      auth_method: cert
      auth_options: "map=autoctl_node_remote"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + [new_entry] }}"
  loop: "{{ groups['postgres_cluster'] | default([]) | flatten(levels=1) }}"

- name: "add autoctl_node user to pg_hba entries for each cluster member for template1 database"
  vars:
    new_entry:
      type: hostssl
      database: "template1"
      address: "{{ hostvars[item]['host_ip'] | default(hostvars[item]['ansible_host']) }}/32"
      user: "autoctl_node"
      auth_method: cert
      auth_options: "map=autoctl_node_remote"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + [new_entry] }}"
  loop: "{{ groups['postgres_cluster'] | default([]) | flatten(levels=1) }}"

- name: "add autoctl_node user to pg_hba entries for each cluster member for pg_auto_failover database"
  vars:
    new_entry:
      type: hostssl
      database: "pg_auto_failover"
      address: "{{ hostvars[item]['host_ip'] | default(hostvars[item]['ansible_host']) }}/32"
      user: "autoctl_node"
      auth_method: cert
      auth_options: "map=autoctl_node_remote"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + [new_entry] }}"
  loop: "{{ groups['postgres_cluster'] | default([]) | flatten(levels=1) }}"

- name: "add pgautofailover_replicator user to pg_hba entries for each cluster member for pg_auto_failover database"
  vars:
    new_entry:
      type: hostssl
      database: "replication"
      address: "{{ hostvars[item]['host_ip'] | default(hostvars[item]['ansible_host']) }}/32"
      user: "pgautofailover_replicator"
      auth_method: cert
      auth_options: "map=pgautofailover_replicator_remote"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + [new_entry] }}"
  loop: "{{ groups['postgres_cluster'] | default([]) | flatten(levels=1) }}"

- name: "add pgautofailover_replicator user to pg_hba entries for each cluster member for pg_auto_failover database"
  vars:
    new_entry:
      type: hostssl
      database: "postgres"
      address: "{{ hostvars[item]['host_ip'] | default(hostvars[item]['ansible_host']) }}/32"
      user: "pgautofailover_replicator"
      auth_method: cert
      auth_options: "map=pgautofailover_replicator_remote"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + [new_entry] }}"
  loop: "{{ groups['postgres_cluster'] | default([]) | flatten(levels=1) }}"

- name: "add pgautofailover_monitor user to pg_hba entries for each cluster member for pg_auto_failover database"
  vars:
    new_entry:
      type: hostssl
      database: "postgres"
      address: "{{ hostvars[item]['host_ip'] | default(hostvars[item]['ansible_host']) }}/32"
      user: "pgautofailover_monitor"
      auth_method: cert
      auth_options: "map=pgautofailover_monitor_remote"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + [new_entry] }}"
  loop: "{{ groups['postgres_cluster'] | default([]) | flatten(levels=1) }}"

- name: "add default hba_entries to the end of computed_postgresql_cluster_pg_hba_entries"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + (_postgresql_cluster_minimum_hba_entries | default([])) }}"

- name: "add non system pg_hba entries for all data cluster members to pg_hba.conf"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + (postgresql_cluster_hba_entries | default([])) }}"
  when: not (postgresql_cluster_is_monitor | default('False') | bool)

- name: "add non system pg_hba entries for monitor to the end of computed_postgresql_cluster_pg_hba_entries"
  ansible.builtin.set_fact:
    computed_postgresql_cluster_pg_hba_entries: "{{ computed_postgresql_cluster_pg_hba_entries + (postgresql_monitor_hba_entries | default([])) }}"
  when: (postgresql_cluster_is_monitor | default('False') | bool)

- name: "Configure pg_ident mapping for all cluster members and monitors"
  ansible.builtin.template:
    src: "pg_ident.conf.j2"
    dest: "{{ postgresql_cluster_config_path }}/pg_ident.conf"
    owner: "{{ postgresql_cluster_user }}"
    group: "{{ postgresql_cluster_group }}"
    mode: 0600
    backup: yes
    force: yes

- name: "Configure host based authentication for all cluster members and monitors"
  ansible.builtin.template:
    src: "pg_hba.conf.j2"
    dest: "{{ postgresql_cluster_config_path }}/pg_hba.conf"
    owner: "{{ postgresql_cluster_user }}"
    group: "{{ postgresql_cluster_group }}"
    mode: 0600
    backup: yes
    force: yes
  when: computed_postgresql_cluster_pg_hba_entries | length > 0

- name: "reload cluster config"
  become_user: postgres
  ansible.builtin.shell: >
    PATH="$PATH:{{ postgresql_cluster_bin_path }}" pg_ctl reload --pgdata {{ postgresql_cluster_data_dir }}

# TODO: move this to a separate role?
- name: "Allow incoming access to the postgres port {{ postgresql_cluster_port | default('5433') }} for all cluster members"
  community.general.ufw:
    rule: allow
    direction: in
    src: "{{ hostvars[item]['host_ip'] | default(hostvars[item]['ansible_host']) }}/32"
    to_port: "{{ postgresql_cluster_port | default('5433') }}"
    comment: "PostgreSQL {{ postgresql_cluster_name }} - host: {{ hostvars[item]['inventory_hostname'] }}"
  loop: "{{ groups['postgres_cluster'] | default([]) | flatten(levels=1) }}"

- name: "Allow incoming access to the postgres port {{ postgresql_cluster_port | default('5433') }} for all cluster clients"
  community.general.ufw:
    rule: allow
    direction: in
    src: "{{ item.ip }}/{{ item.subnet_mask | default('32') }}"
    to_port: "{{ postgresql_cluster_port | default('5433') }}"
    comment: "Client {{ postgresql_cluster_name }} - client: {{ item.name }}"
    state: enabled
  loop: "{{ postgresql_cluster_allowed_clients | default([]) | flatten(levels=1) }}"
  when: (postgresql_cluster_allowed_clients | default('False') | bool) and not (postgresql_cluster_is_monitor | default('False') | bool)

- name: "Allow incoming access to the postgres port {{ postgresql_cluster_port | default('5433') }} for all cluster clients"
  community.general.ufw:
    rule: allow
    direction: in
    src: "{{ item.ip }}/{{ item.subnet_mask | default('32') }}"
    to_port: "{{ postgresql_cluster_port | default('5433') }}"
    comment: "Client {{ postgresql_cluster_name }} - client: {{ item.name }}"
    state: enabled
  loop: "{{ postgresql_monitor_allowed_clients | default([]) | flatten(levels=1) }}"
  when: (postgresql_cluster_allowed_clients | default('False') | bool) and (postgresql_cluster_is_monitor | default('False') | bool)

